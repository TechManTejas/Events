{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 *
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('claro/classy.node') }}

<article {{ attributes.addClass('card', 'shadow-sm', 'border', 'rounded', 'p-3', 'm-3') }}>
  
  {{ title_prefix }}
  {% if label and not page %}
    <h2 class="card-title fw-bold mb-3 title-truncate"{{ title_attributes }}>
      <a href="{{ url }}" class="text-decoration-none text-dark" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <div class="node__meta card-footer bg-light text-muted py-2 px-3 d-flex align-items-center gap-2">
      {% if author_picture %}
        <div class="author-image rounded-circle overflow-hidden" style="width: 40px; height: 40px;">
          {{ author_picture }}
        </div>
      {% endif %}
      <div{{ author_attributes.addClass('node__submitted') }}>
        <small class="text-muted">
          {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        </small>
      </div>
    </footer>
  {% endif %}

  <div>
    <div class="d-flex flex-column gap-3">
      {% if node.field_organizer_image.entity %}
        <div class="text-center">
          <img src="{{ file_url(node.field_organizer_image.entity.uri.value) }}" alt="Organizer Image" class="img-fluid rounded">
        </div>
      {% endif %}

      {% if content.field_name %}
        <div class="mb-2">
          <strong class="d-block">Name:</strong>
          <span>{{ content.field_name }}</span>
        </div>
      {% endif %}

      {% if content.field_video %}
        <div class="mb-2">
          <strong class="d-block">Video:</strong>
          <div class="ratio ratio-16x9">
            {{ content.field_video }}
          </div>
        </div>
      {% endif %}
    </div>
  </div>

  <div class="node__links mt-3">
    {{ content.links }}
  </div>
</article>


